#!/usr/bin/env node

/* eslint-disable no-console */
/* eslint-disable @typescript-eslint/no-var-requires */

const { stream: parseSchemaStream, schemaStats } = require('../');

const { MongoClient } = require('mongodb');
const sample = require('mongodb-collection-sample');
const toNS = require('mongodb-ns');
const yaml = require('js-yaml');
const pkg = require('../package.json');
const Table = require('cli-table');
const numeral = require('numeral');
const { EJSON } = require('bson');
const ProgressBar = require('progress');

const argv = require('yargs')
  .strict()
  .usage('Usage: $0 <uri> <ns> [--format=<json|yaml|table> --number=<n>]')
  .demand(2)
  .option('n', {
    alias: 'number',
    default: 100,
    describe: 'The number of documents to return.'
  })
  .option('f', {
    alias: 'format',
    default: 'json',
    describe: 'The output format.',
    choices: ['json', 'yaml', 'table']
  })
  .option('o', {
    alias: 'output',
    type: 'boolean',
    describe: 'Print the computed schema to stdout.',
    default: true
  })
  .option('r', {
    alias: 'repeat',
    type: 'number',
    describe: 'Repeat experiment n times.',
    default: 1
  })
  .option('s', {
    alias: 'stats',
    type: 'boolean',
    describe: 'print schema statistics to stderr'
  })
  .option('p', {
    alias: 'promote',
    type: 'boolean',
    default: true,
    describe: 'promote values to Javascript numbers.'
  })
  .options('t', {
    alias: 'semantic-types',
    type: 'boolean',
    default: false,
    describe: 'semantic type detection, currently supported are emails and geojson'
  })
  .option('values', {
    type: 'boolean',
    default: true,
    describe: 'enables the collection of sample values'
  })
  .option('sampling', {
    type: 'boolean',
    default: true,
    describe: 'use random sampling on the collection.'
  })
  .describe('version', 'Show version.')
  .alias('h', 'help')
  .describe('h', 'Show this screen.')
  .help('h')
  .wrap(100)
  .example(
    '$0 localhost:27017 mongodb.fanclub --number 1000 --repeat 5 --stats ' +
    '--no-output', 'analyze 1000 docs from the mongodb.fanclub ' +
    'collection, repeat 5 times and only show statistics.'
  )
  .example(
    '$0 localhost:27017 test.foo --format table',
    'analyze 100 docs from the test.foo collection and print ' +
    'the schema in table form.'
  )
  .argv;

let uri = argv._[0];
if (!uri.startsWith('mongodb://') && !uri.startsWith('mongodb+srv://')) {
  uri = 'mongodb://' + uri;
}
const sampleSize = parseInt(argv.number, 10);

if (argv.version) {
  console.error(pkg.version);
  process.exit(1);
}

function addTableRow(table, field) {
  table.push([
    field.path,
    field.type,
    numeral(field.probability).format('0.000%')
  ]);

  if (field.fields) {
    field.fields.map(function(child) {
      addTableRow(table, child);
    });
  }

  if (field.arrayFields) {
    field.arrayFields.map(function(child) {
      addTableRow(table, child);
    });
  }
}

function getTable(schema) {
  const table = new Table({
    head: ['Path', 'Type', 'Probability'],
    colWidths: [50, 30, 20]
  });
  schema.fields.map(function(field) {
    addTableRow(table, field);
  });
  return table;
}

const bar = new ProgressBar('analyzing [:bar] :percent :etas ', {
  total: argv.number * argv.repeat,
  width: 60,
  complete: '=',
  incomplete: ' ',
  clear: true
});

const client = new MongoClient(uri);

(async function main() {
  try {
    await client.connect();
  } catch (err) {
    if (err) {
      console.error('Failed to connect to MongoDB: ', err);
      process.exit(1);
    }
  }

  const ns = toNS(argv._[1]);
  const db = client.db(ns.database);
  let ts;

  const options = {
    size: sampleSize,
    query: {},
    promoteValues: argv.promote
  };

  let schema;
  const schemaOptions = {
    storeValues: argv.values,
    semanticTypes: argv.semanticTypes
  };

  try {
    for (let i = 0; i < argv.repeat; i++) {
      await new Promise((resolve, reject) => {
        const source = argv.sampling
          ? sample(db, ns.collection, options)
          : db.collection(ns.collection).find(options.query, {
            promoteValues: options.promoteValues
          }).limit(options.size).stream();

        source
          .once('data', function() {
            ts = new Date();
          })
          .pipe(parseSchemaStream(schemaOptions))
          .on('progress', function() {
            bar.tick();
          })
          .on('data', function(data) {
            schema = data;
          })
          .on('error', function(err) {
            reject(err);
          })
          .on('end', function() {
            const duration = new Date() - ts;
            resolve(duration);
          });
      });
    }
  } catch (err) {
    console.error('error:', err.message);
    process.exit(1);
  }

  if (argv.output) {
    let output = '';
    if (argv.format === 'yaml') {
      output = yaml.dump(schema);
    } else if (argv.format === 'table') {
      output = getTable(schema).toString();
    } else {
      output = EJSON.stringify(schema, null, 2);
    }
    console.log(output);
  }
  if (argv.stats) {
    let branchOutput = '[';
    const branchingFactors = schemaStats.branch(schema);
    if (branchingFactors.length > 20) {
      branchOutput += `${branchingFactors.slice(0, 20).join(',')},...] (top 20 shown)`;
    } else {
      branchOutput += branchingFactors.join(',') + ']';
    }

    console.error('execution count: ' + argv.repeat);
    console.error('toplevel fields:', schema.fields.length);
    console.error('branching factors:', branchOutput);
    console.error('schema width: ' + schemaStats.width(schema));
    console.error('schema depth: ' + schemaStats.depth(schema));
  }
  client.close();
})();
