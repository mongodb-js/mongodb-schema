#!/usr/bin/env node

/* eslint no-console: 0 */

var schemaStream = require('../lib/stream');
var schemaStats = require('../lib/stats');

var mongodb = require('mongodb');
var sample = require('mongodb-collection-sample');
var toNS = require('mongodb-ns');
var yaml = require('js-yaml');
var pkg = require('../package.json');
var Table = require('cli-table');
var numeral = require('numeral');
var EJSON = require('mongodb-extended-json');
var ProgressBar = require('progress');
var async = require('async');
var stats = require('stats-lite');

// var debug = require('debug')('mongodb-schema:bin');

var argv = require('yargs')
  .strict()
  .usage('Usage: $0 <uri> <ns> [--format=<json|yaml|table> --sample=<n>]')
  .demand(2)
  .option('n', {
    alias: 'number',
    default: 100,
    describe: 'The number of documents to return.'
  })
  .option('f', {
    alias: 'format',
    default: 'json',
    describe: 'The output format.',
    choices: ['json', 'yaml', 'table']
  })
  .option('o', {
    alias: 'output',
    type: 'boolean',
    describe: 'Print the computed schema to stdout.',
    default: true
  })
  .option('r', {
    alias: 'repeat',
    type: 'number',
    describe: 'Repeat experiment n times.',
    default: 1
  })
  .option('s', {
    alias: 'stats',
    type: 'boolean',
    describe: 'print schema statistics to stderr'
  })
  .option('p', {
    alias: 'promote',
    type: 'boolean',
    default: true,
    describe: 'promote values to Javascript numbers.'
  })
  .options('t', {
    alias: 'semantic-types',
    type: 'boolean',
    default: false,
    describe: 'semantic type detection, currently supported are emails and geojson'
  })
  .option('values', {
    type: 'boolean',
    default: true,
    describe: 'enables the collection of sample values'
  })
  .option('sampling', {
    type: 'boolean',
    default: true,
    describe: 'use random sampling on the collection.'
  })
  .describe('debug', 'Enable debug messages.')
  .describe('version', 'Show version.')
  .alias('h', 'help')
  .describe('h', 'Show this screen.')
  .help('h')
  .wrap(100)
  .example('$0 localhost:27017 mongodb.fanclub --sample 1000 --repeat 5 --stats '
    + '--no-output', 'analyze 1000 docs from the mongodb.fanclub '
    + 'collection with the old ampersand parser, repeat 5 times and only show statistics.')
  .example('$0 localhost:27017 test.foo --format table',
    'analyze 100 docs from the test.foo collection and print '
    + 'the schema in table form.')
  .argv;

if (argv.debug) {
  process.env.DEBUG = '*';
}

var uri = argv._[0];
if (!uri.startsWith('mongodb://')) {
  uri = 'mongodb://' + uri;
}
var sampleSize = parseInt(argv.number, 10);

if (argv.version) {
  console.error(pkg.version);
  process.exit(1);
}

function addTableRow(table, field) {
  table.push([
    field.path,
    field.type,
    numeral(field.probability).format('0.000%')
  ]);

  if (field.fields) {
    field.fields.map(function(child) {
      addTableRow(table, child);
    });
  }

  if (field.arrayFields) {
    field.arrayFields.map(function(child) {
      addTableRow(table, child);
    });
  }
}

function getTable(schema) {
  var table = new Table({
    head: ['Path', 'Type', 'Probability'],
    colWidths: [50, 30, 20]
  });
  schema.fields.map(function(field) {
    addTableRow(table, field);
  });
  return table;
}

var bar = new ProgressBar('analyzing [:bar] :percent :etas ', {
  total: argv.number * argv.repeat,
  width: 60,
  complete: '=',
  incomplete: ' ',
  clear: true
});

mongodb.connect(uri, {useUnifiedTopology: true}, function(err, conn) {
  if (err) {
    console.error('Failed to connect to MongoDB: ', err);
    process.exit(1);
  }

  var ns = toNS(argv._[1]);
  var db = conn.db(ns.database);
  var ts;

  var options = {
    size: sampleSize,
    query: {},
    promoteValues: argv.promote
  };

  var schema;
  var schemaOptions = {
    storeValues: argv.values,
    semanticTypes: argv.semanticTypes
  };

  async.timesSeries(argv.repeat, function(arr, cb) {
    var source = argv.sampling ?
      sample(db, ns.collection, options) :
      db.collection(ns.collection).find(options.query, {}, {
        promoteValues: options.promoteValues
      }).limit(options.size);

    source
      .once('data', function() {
        ts = new Date();
      })
      .pipe(schemaStream(schemaOptions))
      .on('progress', function() {
        bar.tick();
      })
      .on('data', function(data) {
        schema = data;
      })
      .on('end', function() {
        var dur = new Date() - ts;
        cb(null, dur);
      });
  }, function(err2, res) {
    if (err2) {
      console.error('error:', err2.message);
      process.exit(1);
    }
    if (argv.output) {
      var output = '';
      if (argv.format === 'yaml') {
        output = yaml.dump(schema);
      } else if (argv.format === 'table') {
        output = getTable(schema).toString();
      } else {
        output = EJSON.stringify(schema, null, 2);
      }
      console.log(output);
    }
    if (argv.stats) {
      var branchOutput = '[';
      var branchingFactors = schemaStats.branch(schema);
      if (branchingFactors.length > 20) {
        branchOutput += branchingFactors.slice(0, 20).join(',')
          + ',...] (top 20 shown)';
      } else {
        branchOutput += branchingFactors.join(',') + ']';
      }

      console.error('execution count: ' + argv.repeat);
      console.error('mean time: ' + numeral(stats.mean(res))
          .format('0.00') + 'ms (individual results: %s)', res.toString());
      console.error('stdev time: ' + numeral(stats.stdev(res)).format('0.00') + 'ms');
      console.error('toplevel fields:', schema.fields.length);
      console.error('branching factors:', branchOutput);
      console.error('schema width: ' + schemaStats.width(schema));
      console.error('schema depth: ' + schemaStats.depth(schema));
    }
    conn.close();
  });
});
